 
 var C = function(a, b, c){
    return function() {
        return a.apply(b, arguments);
    };
}
// a를 호출하는데, b를 this에 바인딩한다. a 함수에서 사용하는 this는 b의 요소를 호출한다. a도 선택 가능하다.

w = function(a, b) {
        var c = Array.prototype.slice.call(arguments, 1);
        return function() {
            var d = c.slice();
            d.push.apply(d, arguments);
            return a.apply(this, d)
        }
    }
// return은 함수를 정지시키며 함수의 결과를 전달함. 

return 함수; 형은 재사용성을 가진다. 리턴으로 묶인 함수는 기본적으로 부모 함수의 모든 요소에 접근할 수 있으며 조작할 수 있다.
이는 모듈화를 구현하는데 근본적인 요소가된다.

return으로 지정된 함수는 바깥 함수의 기능으로서 동작함. 결국 바깥함수의 역할은 상속을 해주는 부모이다. 

return inner함수는 무조건 외부 함수의 생명주기가 종료된 이후 기능한다. 따라서 inner함수는 기능은 하지만 outer함수의 요소는 전혀 사용할 수 없어야한다.
클로저는 결국 함수와 함수가 조합된 환경에서의 개념이다. 클로저는 어떤 데이터와 그 데이터를 조작하는 함수를 연관시켜준다. 이는 객체지향적 맥락으로 이어진다.
